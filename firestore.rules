rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Projects can be read by anyone, but only created/updated by the author
    match /projects/{projectId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.authorId ||
        (request.resource.data.keys().hasOnly(['comments']) && request.resource.data.comments is list)
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Allow all authenticated users to read and write comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
      }
    }
    
    // Clubs can be read by anyone, managed by mentors
    match /clubs/{clubId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }
    
    // Events can be read by anyone, managed by mentors
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }
    
    // Opportunities can be read by anyone, managed by mentors
    match /opportunities/{opportunityId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }
    
    // Notifications can only be read/written by the recipient
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comments can be read by anyone, created by authenticated users
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Chat requests - students can create, mentors can read/update their requests
    match /chatRequests/{requestId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.studentId || request.auth.uid == resource.data.mentorId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow update: if request.auth != null && request.auth.uid == resource.data.mentorId;
      allow delete: if false; // Don't allow deletion, only status updates
    }
    
    // Mentorship connections - both mentor and student can read
    match /mentorshipConnections/{connectionId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.mentorId || request.auth.uid == resource.data.studentId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.mentorId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.mentorId || request.auth.uid == resource.data.studentId);
    }
    
    // Mentorship relationships (legacy - keeping for backward compatibility)
    match /mentorships/{mentorshipId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.mentorId || request.auth.uid == resource.data.studentId);
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}